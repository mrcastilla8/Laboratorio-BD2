ALTER SESSION SET CURRENT_SCHEMA = HR;
SET SERVEROUTPUT ON;

CREATE TABLE horario (
  dia_semana       NUMBER(1)   NOT NULL CHECK (dia_semana BETWEEN 1 AND 7),
  turno            VARCHAR2(20) NOT NULL,
  hora_inicio      DATE         NOT NULL,
  hora_termino     DATE         NOT NULL,
  CONSTRAINT pk_horario PRIMARY KEY (dia_semana, turno),
  CONSTRAINT ck_horario_horas CHECK (hora_termino > hora_inicio)
);

CREATE TABLE empleado_horario (
  employee_id      NUMBER       NOT NULL REFERENCES employees(employee_id),
  dia_semana       NUMBER(1)    NOT NULL CHECK (dia_semana BETWEEN 1 AND 7),
  turno            VARCHAR2(20) NOT NULL,
  CONSTRAINT pk_empleado_horario PRIMARY KEY (employee_id, dia_semana),
  CONSTRAINT fk_eh_horario FOREIGN KEY (dia_semana, turno)
    REFERENCES horario (dia_semana, turno)
);

CREATE TABLE asistencia_empleado (
  employee_id       NUMBER      NOT NULL REFERENCES employees(employee_id),
  dia_semana        NUMBER(1)   NOT NULL CHECK (dia_semana BETWEEN 1 AND 7),
  fecha_real        DATE        NOT NULL,
  hora_inicio_real  DATE        NOT NULL,
  hora_termino_real DATE        NOT NULL,
  inasistencia      CHAR(1)     DEFAULT 'N' CHECK (inasistencia IN ('S','N')),
  CONSTRAINT pk_asistencia_empleado PRIMARY KEY (employee_id, fecha_real),
  CONSTRAINT ck_asistencia_horas CHECK (hora_termino_real > hora_inicio_real)
);

CREATE TABLE capacitacion (
  capacitacion_id     NUMBER GENERATED BY DEFAULT AS IDENTITY,
  nombre              VARCHAR2(100) NOT NULL,
  horas               NUMBER(5,2)   NOT NULL CHECK (horas > 0),
  descripcion         VARCHAR2(4000),
  CONSTRAINT pk_capacitacion PRIMARY KEY (capacitacion_id)
);

CREATE TABLE empleado_capacitacion (
  employee_id       NUMBER NOT NULL REFERENCES employees(employee_id),
  capacitacion_id   NUMBER NOT NULL REFERENCES capacitacion(capacitacion_id),
  CONSTRAINT pk_empleado_capacitacion PRIMARY KEY (employee_id, capacitacion_id)
);

INSERT INTO horario VALUES (1,'MAÑANA',  TO_DATE('2000-01-01 08:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 12:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (1,'TARDE',   TO_DATE('2000-01-01 14:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 18:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (2,'MAÑANA',  TO_DATE('2000-01-01 08:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 12:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (2,'TARDE',   TO_DATE('2000-01-01 14:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 18:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (3,'MAÑANA',  TO_DATE('2000-01-01 09:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 13:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (3,'TARDE',   TO_DATE('2000-01-01 13:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 17:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (4,'COMPLETO',TO_DATE('2000-01-01 09:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 17:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (5,'COMPLETO',TO_DATE('2000-01-01 09:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 17:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (6,'MAÑANA',  TO_DATE('2000-01-01 08:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 12:00','YYYY-MM-DD HH24:MI'));
INSERT INTO horario VALUES (7,'TARDE',   TO_DATE('2000-01-01 14:00','YYYY-MM-DD HH24:MI'), TO_DATE('2000-01-01 18:00','YYYY-MM-DD HH24:MI'));

INSERT INTO empleado_horario VALUES (100,1,'MAÑANA');
INSERT INTO empleado_horario VALUES (100,2,'TARDE');
INSERT INTO empleado_horario VALUES (101,1,'TARDE');
INSERT INTO empleado_horario VALUES (101,4,'COMPLETO');
INSERT INTO empleado_horario VALUES (102,3,'MAÑANA');
INSERT INTO empleado_horario VALUES (102,5,'COMPLETO');
INSERT INTO empleado_horario VALUES (103,3,'TARDE');
INSERT INTO empleado_horario VALUES (104,6,'MAÑANA');
INSERT INTO empleado_horario VALUES (105,7,'TARDE');
INSERT INTO empleado_horario VALUES (106,4,'COMPLETO');

INSERT INTO asistencia_empleado VALUES (100, 1, DATE '2025-10-06', TO_DATE('2025-10-06 08:02','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-06 12:00','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (100, 2, DATE '2025-10-07', TO_DATE('2025-10-07 14:05','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-07 18:01','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (101, 1, DATE '2025-10-06', TO_DATE('2025-10-06 14:10','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-06 18:00','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (101, 4, DATE '2025-10-09', TO_DATE('2025-10-09 09:10','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-09 17:00','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (102, 3, DATE '2025-10-08', TO_DATE('2025-10-08 09:00','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-08 13:05','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (102, 5, DATE '2025-10-10', TO_DATE('2025-10-10 09:02','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-10 16:55','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (103, 3, DATE '2025-10-08', TO_DATE('2025-10-08 13:02','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-08 16:55','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (104, 6, DATE '2025-10-11', TO_DATE('2025-10-11 08:30','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-11 12:00','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (105, 7, DATE '2025-10-12', TO_DATE('2025-10-12 14:00','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-12 18:05','YYYY-MM-DD HH24:MI'), 'N');
INSERT INTO asistencia_empleado VALUES (106, 4, DATE '2025-10-09', TO_DATE('2025-10-09 09:25','YYYY-MM-DD HH24:MI'), TO_DATE('2025-10-09 17:00','YYYY-MM-DD HH24:MI'), 'N');

INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('Onboarding', 8, 'Inducción general');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('Seguridad TI', 6, 'Buenas prácticas');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('SQL Avanzado', 12, 'Joins, ventanas');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('PL/SQL', 16, 'Paquetes y triggers');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('Docker', 10, 'Contenedores');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('Kubernetes', 14, 'Orquestación');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('Scrum', 8, 'Metodología Agile');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('UX Básico', 6, 'Interfaces');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('DataViz', 10, 'Visualización');
INSERT INTO capacitacion (nombre, horas, descripcion) VALUES ('ETL', 12, 'Integración de datos');

INSERT INTO empleado_capacitacion VALUES (100, 1);
INSERT INTO empleado_capacitacion VALUES (100, 3);
INSERT INTO empleado_capacitacion VALUES (101, 2);
INSERT INTO empleado_capacitacion VALUES (101, 4);
INSERT INTO empleado_capacitacion VALUES (102, 3);
INSERT INTO empleado_capacitacion VALUES (103, 5);
INSERT INTO empleado_capacitacion VALUES (104, 7);
INSERT INTO empleado_capacitacion VALUES (105, 8);
INSERT INTO empleado_capacitacion VALUES (106, 9);
INSERT INTO empleado_capacitacion VALUES (106,10);

COMMIT;

-- 1
CREATE OR REPLACE PACKAGE hr_pack AS
  PROCEDURE emp_create(p_emp_id NUMBER, p_last_name VARCHAR2, p_first_name VARCHAR2,
                       p_email VARCHAR2, p_hire_date DATE, p_job_id VARCHAR2,
                       p_salary NUMBER, p_dept_id NUMBER);
  PROCEDURE emp_read(p_emp_id NUMBER, p_rc OUT SYS_REFCURSOR);
  PROCEDURE emp_update(p_emp_id NUMBER, p_last_name VARCHAR2 DEFAULT NULL, p_first_name VARCHAR2 DEFAULT NULL,
                       p_email VARCHAR2 DEFAULT NULL, p_job_id VARCHAR2 DEFAULT NULL,
                       p_salary NUMBER DEFAULT NULL, p_dept_id NUMBER DEFAULT NULL);
  PROCEDURE emp_delete(p_emp_id NUMBER);
  -- 3.1.1
  PROCEDURE top4_rotacion_puestos(p_rc OUT SYS_REFCURSOR);
  -- 3.1.2
  FUNCTION avg_hires_por_mes(p_rc OUT SYS_REFCURSOR) RETURN NUMBER;
  -- 3.1.3
  PROCEDURE reporte_regional(p_rc OUT SYS_REFCURSOR);
  -- 3.1.4
  FUNCTION tiempo_servicio(p_rc OUT SYS_REFCURSOR) RETURN NUMBER;
  -- 3.1.5
  FUNCTION horas_trabajadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER;
  -- 3.1.6
  FUNCTION horas_faltadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER;
  -- 3.1.7
  PROCEDURE planilla_proporcional(p_mes NUMBER, p_anio NUMBER, p_rc OUT SYS_REFCURSOR);
  -- 3.1.1
  FUNCTION horas_capacitacion_empleado(p_employee_id NUMBER) RETURN NUMBER;
  -- 3.1.2
  PROCEDURE listado_capacitaciones(p_rc OUT SYS_REFCURSOR);
END hr_pack;
/

-- 2
CREATE OR REPLACE PACKAGE BODY hr_pack AS
  PROCEDURE emp_create(p_emp_id NUMBER, p_last_name VARCHAR2, p_first_name VARCHAR2,
                       p_email VARCHAR2, p_hire_date DATE, p_job_id VARCHAR2,
                       p_salary NUMBER, p_dept_id NUMBER) IS
  BEGIN
    INSERT INTO employees(employee_id, last_name, first_name, email, hire_date, job_id, salary, department_id)
    VALUES (p_emp_id, p_last_name, p_first_name, p_email, p_hire_date, p_job_id, p_salary, p_dept_id);
  END;

  PROCEDURE emp_read(p_emp_id NUMBER, p_rc OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_rc FOR SELECT * FROM employees WHERE employee_id = p_emp_id;
  END;

  PROCEDURE emp_update(p_emp_id NUMBER, p_last_name VARCHAR2, p_first_name VARCHAR2,
                       p_email VARCHAR2, p_job_id VARCHAR2,
                       p_salary NUMBER, p_dept_id NUMBER) IS
  BEGIN
    UPDATE employees
       SET last_name     = COALESCE(p_last_name, last_name),
           first_name    = COALESCE(p_first_name, first_name),
           email         = COALESCE(p_email, email),
           job_id        = COALESCE(p_job_id, job_id),
           salary        = COALESCE(p_salary, salary),
           department_id = COALESCE(p_dept_id, department_id)
     WHERE employee_id   = p_emp_id;
  END;

  PROCEDURE emp_delete(p_emp_id NUMBER) IS
  BEGIN
    DELETE FROM employees WHERE employee_id = p_emp_id;
  END;

  PROCEDURE top4_rotacion_puestos(p_rc OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_rc FOR
      SELECT e.employee_id,
             e.last_name  AS apellido,
             e.first_name AS nombre,
             e.job_id     AS job_actual,
             (SELECT job_title FROM jobs j WHERE j.job_id = e.job_id) AS job_actual_nombre,
             NVL((SELECT COUNT(*) FROM job_history jh WHERE jh.employee_id = e.employee_id),0) AS cambios_puesto
      FROM employees e
      ORDER BY cambios_puesto DESC, e.employee_id
      FETCH FIRST 4 ROWS ONLY;
  END;

  FUNCTION avg_hires_por_mes(p_rc OUT SYS_REFCURSOR) RETURN NUMBER IS
    v_total_meses NUMBER;
  BEGIN
    OPEN p_rc FOR
      SELECT TO_CHAR(mes_ini,'Month','NLS_DATE_LANGUAGE=English') AS mes,
             ROUND(AVG(cnt),2) AS promedio_contrataciones
      FROM (
        SELECT TRUNC(hire_date,'MM') mes_ini, COUNT(*) cnt
          FROM employees
         GROUP BY TRUNC(hire_date,'MM')
      )
      GROUP BY TO_CHAR(mes_ini,'Month','NLS_DATE_LANGUAGE=English'), EXTRACT(MONTH FROM mes_ini)
      ORDER BY EXTRACT(MONTH FROM mes_ini);
    SELECT COUNT(DISTINCT EXTRACT(MONTH FROM hire_date)) INTO v_total_meses FROM employees;
    RETURN v_total_meses;
  END;

  PROCEDURE reporte_regional(p_rc OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_rc FOR
      SELECT r.region_name AS region,
             SUM(e.salary) AS suma_salarios,
             COUNT(e.employee_id) AS cantidad_empleados,
             MIN(e.hire_date) AS fecha_ingreso_mas_antiguo
        FROM regions r
        JOIN countries c   ON c.region_id     = r.region_id
        JOIN locations l   ON l.country_id    = c.country_id
        JOIN departments d ON d.location_id   = l.location_id
        JOIN employees e   ON e.department_id = d.department_id
       GROUP BY r.region_name
       ORDER BY r.region_name;
  END;

  FUNCTION tiempo_servicio(p_rc OUT SYS_REFCURSOR) RETURN NUMBER IS
    v_total NUMBER;
  BEGIN
    OPEN p_rc FOR
      SELECT e.employee_id,
             e.first_name,
             e.last_name,
             MONTHS_BETWEEN(TRUNC(SYSDATE), TRUNC(e.hire_date)) AS meses_servicio,
             FLOOR(MONTHS_BETWEEN(TRUNC(SYSDATE), TRUNC(e.hire_date))/12) AS anios,
             FLOOR(MONTHS_BETWEEN(TRUNC(SYSDATE), TRUNC(e.hire_date))/12) AS meses_vacaciones
        FROM employees e;

    SELECT SUM(MONTHS_BETWEEN(TRUNC(SYSDATE), TRUNC(hire_date)))
      INTO v_total
      FROM employees;

    RETURN v_total;
  END;

  FUNCTION horas_diff(p_ini DATE, p_fin DATE) RETURN NUMBER IS
  BEGIN
    RETURN ROUND( (p_fin - p_ini) * 24, 2 );
  END;

  FUNCTION horas_trabajadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER IS
    v_total NUMBER := 0;
  BEGIN
    SELECT NVL(SUM(horas_diff(hora_inicio_real, hora_termino_real)),0)
      INTO v_total
      FROM asistencia_empleado a
     WHERE a.employee_id = p_employee_id
       AND EXTRACT(MONTH FROM a.fecha_real) = p_mes
       AND EXTRACT(YEAR  FROM a.fecha_real) = p_anio
       AND a.inasistencia = 'N';
    RETURN v_total;
  END;

  FUNCTION horas_faltadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER IS
    v_prog NUMBER := 0;
    v_work NUMBER := 0;
  BEGIN
    SELECT NVL(SUM(
             horas_diff(
               TO_DATE('2000-01-01','YYYY-MM-DD') + (SELECT h.hora_inicio - TRUNC(h.hora_inicio) FROM horario h
                                                     WHERE h.dia_semana = TO_NUMBER(TO_CHAR(d,'D'))),
               TO_DATE('2000-01-01','YYYY-MM-DD') + (SELECT h.hora_termino - TRUNC(h.hora_termino) FROM horario h
                                                      WHERE h.dia_semana = TO_NUMBER(TO_CHAR(d,'D')))
           )),0)
      INTO v_prog
      FROM (
        SELECT (TRUNC(ADD_MONTHS(DATE '2000-01-01', (p_anio-2000)*12 + (p_mes-1))) + (LEVEL-1)) d
          FROM dual
        CONNECT BY LEVEL <= EXTRACT(DAY FROM LAST_DAY(TO_DATE(p_anio||LPAD(p_mes,2,'0'),'YYYYMM')))
      ) cal
      WHERE EXISTS (
        SELECT 1
          FROM empleado_horario eh
         WHERE eh.employee_id = p_employee_id
           AND eh.dia_semana = TO_NUMBER(TO_CHAR(d,'D'))
      );

    v_work := horas_trabajadas(p_employee_id, p_mes, p_anio);
    RETURN GREATEST(v_prog - v_work, 0);
  END;

  PROCEDURE planilla_proporcional(p_mes NUMBER, p_anio NUMBER, p_rc OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_rc FOR
      WITH prog AS (
        SELECT e.employee_id,
               hr_pack.horas_faltadas(e.employee_id, p_mes, p_anio) AS hrs_falta,
               hr_pack.horas_trabajadas(e.employee_id, p_mes, p_anio) AS hrs_work
          FROM employees e
      ), base AS (
        SELECT employee_id, hrs_work, hrs_falta, (hrs_work + hrs_falta) AS hrs_prog
          FROM prog
      )
      SELECT e.first_name, e.last_name, e.salary,
             CASE 
               WHEN b.hrs_prog > 0 THEN ROUND(e.salary * (b.hrs_work / b.hrs_prog), 2)
               ELSE 0
             END AS sueldo_calculado
        FROM base b
        JOIN employees e ON e.employee_id = b.employee_id
       ORDER BY sueldo_calculado DESC NULLS LAST;
  END;

  FUNCTION horas_capacitacion_empleado(p_employee_id NUMBER) RETURN NUMBER IS
    v_total NUMBER;
  BEGIN
    SELECT NVL(SUM(c.horas),0) INTO v_total
      FROM empleado_capacitacion ec
      JOIN capacitacion c ON c.capacitacion_id = ec.capacitacion_id
     WHERE ec.employee_id = p_employee_id;
    RETURN v_total;
  END;

  PROCEDURE listado_capacitaciones(p_rc OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_rc FOR
      SELECT c.capacitacion_id, c.nombre AS capacitacion,
             e.employee_id, e.first_name, e.last_name,
             c.horas
        FROM capacitacion c
        LEFT JOIN empleado_capacitacion ec ON ec.capacitacion_id = c.capacitacion_id
        LEFT JOIN employees e ON e.employee_id = ec.employee_id
       ORDER BY c.horas DESC, c.nombre, e.last_name, e.first_name;
  END;

END hr_pack;
/

-- 3
CREATE OR REPLACE TRIGGER trg_chk_asistencia
BEFORE INSERT OR UPDATE ON asistencia_empleado
FOR EACH ROW
DECLARE
  v_turno       empleado_horario.turno%TYPE;
  v_ini_plan    DATE;
  v_fin_plan    DATE;
  v_dia         NUMBER;
BEGIN
  v_dia := TO_NUMBER(TO_CHAR(:NEW.fecha_real, 'D'));
  IF :NEW.dia_semana <> v_dia THEN
    RAISE_APPLICATION_ERROR(-20001, 'Día de semana no coincide con la fecha.');
  END IF;

  SELECT eh.turno INTO v_turno
    FROM empleado_horario eh
   WHERE eh.employee_id = :NEW.employee_id
     AND eh.dia_semana  = :NEW.dia_semana;

  SELECT h.hora_inicio, h.hora_termino
    INTO v_ini_plan, v_fin_plan
    FROM horario h
   WHERE h.dia_semana = :NEW.dia_semana
     AND h.turno      = v_turno;

  IF :NEW.hora_inicio_real < (:NEW.fecha_real + (v_ini_plan - TRUNC(v_ini_plan)) - (30/1440))
     OR :NEW.hora_termino_real > (:NEW.fecha_real + (v_fin_plan - TRUNC(v_fin_plan)) + (30/1440)) THEN
    RAISE_APPLICATION_ERROR(-20002, 'Horas reales fuera de rango razonable respecto al plan.');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20003, 'No existe turno programado para el empleado en ese día.');
END;
/

CREATE OR REPLACE TRIGGER trg_chk_salary_range
BEFORE INSERT OR UPDATE OF salary, job_id ON employees
FOR EACH ROW
DECLARE
  v_min jobs.min_salary%TYPE;
  v_max jobs.max_salary%TYPE;
BEGIN
  SELECT min_salary, max_salary
    INTO v_min, v_max
    FROM jobs
   WHERE job_id = :NEW.job_id;

  IF :NEW.salary < v_min OR :NEW.salary > v_max THEN
    RAISE_APPLICATION_ERROR(-20010,
      'Salario fuera de rango para el puesto ('||:NEW.job_id||')');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_mark_inasistencia
BEFORE INSERT OR UPDATE OF hora_inicio_real, fecha_real ON asistencia_empleado
FOR EACH ROW
DECLARE
  v_turno    empleado_horario.turno%TYPE;
  v_ini_plan DATE;
  v_fin_plan DATE;
  v_ini_real DATE;
  v_dia      NUMBER;
BEGIN
  v_dia := TO_NUMBER(TO_CHAR(:NEW.fecha_real,'D'));
  SELECT eh.turno INTO v_turno
    FROM empleado_horario eh
   WHERE eh.employee_id = :NEW.employee_id
     AND eh.dia_semana  = v_dia;

  SELECT h.hora_inicio, h.hora_termino
    INTO v_ini_plan, v_fin_plan
    FROM horario h
   WHERE h.dia_semana = v_dia
     AND h.turno      = v_turno;

  v_ini_real := :NEW.hora_inicio_real;

  IF v_ini_real < (:NEW.fecha_real + (v_ini_plan - TRUNC(v_ini_plan)) - (30/1440))
     OR v_ini_real > (:NEW.fecha_real + (v_ini_plan - TRUNC(v_ini_plan)) + (30/1440)) THEN
    :NEW.inasistencia := 'S';
    :NEW.hora_termino_real := :NEW.hora_inicio_real;
  ELSE
    :NEW.inasistencia := 'N';
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    :NEW.inasistencia := 'S';
    :NEW.hora_termino_real := :NEW.hora_inicio_real;
END;
/
